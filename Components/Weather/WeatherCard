import React from "react";
import { motion } from "framer-motion";
import { 
  Thermometer, 
  Droplets, 
  Wind, 
  Eye, 
  Sunrise, 
  Sunset,
  Gauge,
  Sun
} from "lucide-react";

export default function WeatherCard({ weather, unit = "celsius" }) {
  const getTemperature = (temp) => {
    if (unit === "fahrenheit") {
      return `${Math.round((temp * 9/5) + 32)}°F`;
    }
    return `${Math.round(temp)}°C`;
  };

  const formatTime = (timestamp) => {
    return new Date(timestamp * 1000).toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const getWeatherGradient = (main) => {
    const gradients = {
      'Clear': 'from-yellow-400 via-orange-500 to-red-500',
      'Clouds': 'from-gray-400 via-gray-500 to-gray-600',
      'Rain': 'from-blue-400 via-blue-500 to-blue-700',
      'Snow': 'from-blue-100 via-blue-200 to-blue-300',
      'Thunderstorm': 'from-purple-600 via-purple-700 to-purple-900',
      'Drizzle': 'from-blue-300 via-blue-400 to-blue-500',
      'Mist': 'from-gray-300 via-gray-400 to-gray-500',
      'Fog': 'from-gray-300 via-gray-400 to-gray-500'
    };
    return gradients[main] || 'from-blue-400 via-blue-500 to-blue-600';
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
      className="relative overflow-hidden"
    >
      {/* Main weather card */}
      <div className="bg-white/10 backdrop-blur-md rounded-3xl border border-white/20 p-8 shadow-2xl">
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-3xl font-bold text-white mb-2">
              {weather.name}, {weather.sys.country}
            </h2>
            <p className="text-white/70 capitalize text-lg">
              {weather.weather[0].description}
            </p>
          </div>
          <div className={`w-20 h-20 rounded-2xl bg-gradient-to-br ${getWeatherGradient(weather.weather[0].main)} flex items-center justify-center shadow-lg`}>
            <img 
              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}
              alt={weather.weather[0].description}
              className="w-16 h-16"
            />
          </div>
        </div>

        {/* Temperature display */}
        <div className="text-center mb-8">
          <div className="text-7xl font-light text-white mb-2">
            {getTemperature(weather.main.temp)}
          </div>
          <p className="text-white/60 text-lg">
            Feels like {getTemperature(weather.main.feels_like)}
          </p>
        </div>

        {/* Weather metrics grid */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 border border-white/10">
            <div className="flex items-center gap-3 mb-2">
              <Thermometer className="w-5 h-5 text-cyan-400" />
              <span className="text-white/70 text-sm">High/Low</span>
            </div>
            <p className="text-white font-semibold">
              {getTemperature(weather.main.temp_max)} / {getTemperature(weather.main.temp_min)}
            </p>
          </div>

          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 border border-white/10">
            <div className="flex items-center gap-3 mb-2">
              <Droplets className="w-5 h-5 text-blue-400" />
              <span className="text-white/70 text-sm">Humidity</span>
            </div>
            <p className="text-white font-semibold">{weather.main.humidity}%</p>
          </div>

          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 border border-white/10">
            <div className="flex items-center gap-3 mb-2">
              <Wind className="w-5 h-5 text-green-400" />
              <span className="text-white/70 text-sm">Wind</span>
            </div>
            <p className="text-white font-semibold">{weather.wind.speed} m/s</p>
          </div>

          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 border border-white/10">
            <div className="flex items-center gap-3 mb-2">
              <Gauge className="w-5 h-5 text-yellow-400" />
              <span className="text-white/70 text-sm">Pressure</span>
            </div>
            <p className="text-white font-semibold">{weather.main.pressure} hPa</p>
          </div>
        </div>

        {/* Additional details */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 border border-white/10">
            <div className="flex items-center gap-3 mb-2">
              <Eye className="w-5 h-5 text-purple-400" />
              <span className="text-white/70 text-sm">Visibility</span>
            </div>
            <p className="text-white font-semibold">
              {weather.visibility ? `${(weather.visibility / 1000).toFixed(1)} km` : 'N/A'}
            </p>
          </div>

          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 border border-white/10">
            <div className="flex items-center gap-3 mb-2">
              <Sunrise className="w-5 h-5 text-orange-400" />
              <span className="text-white/70 text-sm">Sunrise</span>
            </div>
            <p className="text-white font-semibold">{formatTime(weather.sys.sunrise)}</p>
          </div>

          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 border border-white/10">
            <div className="flex items-center gap-3 mb-2">
              <Sunset className="w-5 h-5 text-pink-400" />
              <span className="text-white/70 text-sm">Sunset</span>
            </div>
            <p className="text-white font-semibold">{formatTime(weather.sys.sunset)}</p>
          </div>
        </div>
      </div>
    </motion.div>
  );
}