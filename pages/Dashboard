import React, { useState, useEffect } from "react";
import { WeatherSettings } from "@/entities/WeatherSettings";
import { User } from "@/entities/User";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Settings, AlertCircle, Cloud, RefreshCw } from "lucide-react";
import { motion } from "framer-motion";

import WeatherCard from "../components/weather/WeatherCard";
import SearchBar from "../components/weather/SearchBar";
import ForecastCard from "../components/weather/ForecastCard";
import DetailedMetrics from "../components/weather/DetailedMetrics";
import HourlyForecast from "../components/weather/HourlyForecast";
import WeatherAlerts from "../components/weather/WeatherAlerts";
import WeatherMap from "../components/weather/WeatherMap";
import AnimatedBackground from "../components/weather/AnimatedBackground";

export default function Dashboard() {
  const [weather, setWeather] = useState(null);
  const [forecast, setForecast] = useState(null);
  const [settings, setSettings] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentCity, setCurrentCity] = useState("London");
  const [lastUpdated, setLastUpdated] = useState(null);

  useEffect(() => {
    loadSettings();
  }, []);

  useEffect(() => {
    if (settings?.api_key && currentCity) {
      fetchWeatherData(currentCity);
    }
  }, [settings, currentCity]);

  // Auto-refresh every 10 minutes
  useEffect(() => {
    if (settings?.api_key && currentCity) {
      const interval = setInterval(() => {
        fetchWeatherData(currentCity, true);
      }, 600000); // 10 minutes

      return () => clearInterval(interval);
    }
  }, [settings, currentCity]);

  const loadSettings = async () => {
    try {
      const user = await User.me();
      const userSettings = await WeatherSettings.filter({ created_by: user.email });
      if (userSettings.length > 0) {
        setSettings(userSettings[0]);
        if (userSettings[0].default_city) {
          setCurrentCity(userSettings[0].default_city);
        }
      }
    } catch (error) {
      // User not logged in or no settings found
    }
  };

  const fetchWeatherData = async (city, isRefresh = false) => {
    if (!settings?.api_key) return;
    
    if (!isRefresh) setIsLoading(true);
    setError(null);

    try {
      // Check if city is coordinates (lat,lon format)
      const isCoordinates = /^-?\d+\.?\d*,-?\d+\.?\d*$/.test(city);
      
      const weatherUrl = isCoordinates
        ? `https://api.openweathermap.org/data/2.5/weather?lat=${city.split(',')[0]}&lon=${city.split(',')[1]}&appid=${settings.api_key}&units=metric`
        : `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${settings.api_key}&units=metric`;

      const forecastUrl = isCoordinates
        ? `https://api.openweathermap.org/data/2.5/forecast?lat=${city.split(',')[0]}&lon=${city.split(',')[1]}&appid=${settings.api_key}&units=metric`
        : `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${settings.api_key}&units=metric`;

      const [weatherResponse, forecastResponse] = await Promise.all([
        fetch(weatherUrl),
        fetch(forecastUrl)
      ]);

      if (!weatherResponse.ok) {
        throw new Error("City not found or API error");
      }

      const weatherData = await weatherResponse.json();
      const forecastData = await forecastResponse.json();

      setWeather(weatherData);
      setForecast(forecastData);
      setCurrentCity(weatherData.name);
      setLastUpdated(new Date());
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = (city) => {
    fetchWeatherData(city);
  };

  const handleRefresh = () => {
    if (currentCity) {
      fetchWeatherData(currentCity);
    }
  };

  if (!settings?.api_key) {
    return (
      <div className="min-h-screen flex items-center justify-center p-6">
        <AnimatedBackground weatherCondition="Clear" />
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
          className="max-w-md w-full relative z-10"
        >
          <div className="bg-white/10 backdrop-blur-md rounded-3xl border border-white/20 p-8 shadow-2xl text-center">
            <div className="w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full flex items-center justify-center">
              <Cloud className="w-10 h-10 text-white" />
            </div>
            
            <h2 className="text-2xl font-bold text-white mb-4">
              Welcome to WeatherLux
            </h2>
            <p className="text-white/70 mb-8">
              To get started, you'll need to add your OpenWeatherMap API key in the settings.
            </p>
            
            <Link to={createPageUrl("Settings")}>
              <Button className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white border-0 rounded-2xl py-3 text-lg font-medium transition-all duration-300">
                <Settings className="w-5 h-5 mr-2" />
                Go to Settings
              </Button>
            </Link>
          </div>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 pb-12 relative">
      <AnimatedBackground weatherCondition={weather?.weather[0]?.main || "Clear"} />
      
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-8 relative z-10"
      >
        <h1 className="text-4xl md:text-5xl font-bold text-white mb-4 tracking-tight">
          WeatherLux Pro
        </h1>
        <p className="text-white/60 text-lg mb-4">
          Advanced weather monitoring with real-time insights
        </p>
        
        {lastUpdated && (
          <div className="flex items-center justify-center gap-4 text-white/50 text-sm">
            <span>Last updated: {lastUpdated.toLocaleTimeString()}</span>
            <Button
              variant="ghost"
              size="sm"
              onClick={handleRefresh}
              disabled={isLoading}
              className="text-white/50 hover:text-white hover:bg-white/10 p-2 h-auto"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            </Button>
          </div>
        )}
      </motion.div>

      <div className="relative z-10">
        <SearchBar onSearch={handleSearch} isLoading={isLoading} />

        {error && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-6"
          >
            <Alert className="bg-red-500/10 border-red-500/20 backdrop-blur-md">
              <AlertCircle className="h-4 w-4 text-red-400" />
              <AlertDescription className="text-red-200">{error}</AlertDescription>
            </Alert>
          </motion.div>
        )}

        {isLoading && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="flex justify-center items-center py-20"
          >
            <div className="relative">
              <div className="w-16 h-16 border-4 border-white/20 border-t-cyan-400 rounded-full animate-spin"></div>
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                <Cloud className="w-6 h-6 text-cyan-400" />
              </div>
            </div>
          </motion.div>
        )}

        {weather && !isLoading && (
          <div className="space-y-8">
            <WeatherCard weather={weather} unit={settings.temperature_unit} />
            
            <DetailedMetrics weather={weather} unit={settings.temperature_unit} />
            
            <WeatherAlerts weather={weather} />
            
            {forecast && (
              <>
                <HourlyForecast forecast={forecast} unit={settings.temperature_unit} />
                <ForecastCard forecast={forecast} unit={settings.temperature_unit} />
              </>
            )}
            
            <WeatherMap weather={weather} apiKey={settings.api_key} />
          </div>
        )}
      </div>
    </div>
  );
}